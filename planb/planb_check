#!/bin/bash
#
# Check whether the last successful run of the management tools is within a
# specified delay, and runs planb remediation tool if not.
#
# Specify an optional sleep interval to delay the checks; useful to let the
# scheduled management tool runs try to fix things.

readonly DELAY=$(( 60 * 60 * 24 * 3 ))  # 3 days in seconds
readonly LASTSUCCESS="/var/lib/lastsuccess"
readonly PLANB="/usr/local/sbin/planb"
readonly PLANB_TIMEOUT=900


SLEEP=0
QUIET=0


function log {
  /usr/bin/logger -t "planb_check" "${@}"
  if [[ "${QUIET}" -eq 0 ]]; then
    echo $(date "+%F %T %Z") ${@}
  fi
}


function parse_arguments() {
  while getopts 's:q' OPTION; do
    case ${OPTION} in
      s)
        if [[ ${OPTARG} -gt 0 ]]; then
          SLEEP=${OPTARG}
        else
          echo "Sleep time should be an integer."
          exit 1
        fi
        ;;
      q)
        QUIET=1
        ;;
      \?)
        echo "${0} [-s sleep_interval] [-q]"
        exit 1
        ;;
    esac
  done
}


function check_lastsuccess() {
  if [ -f ${LASTSUCCESS} ]; then
    local now=$(date +"%s")
    local lastsuccess=$(stat -f "%m" ${LASTSUCCESS})
    if (( ${lastsuccess} > ${now} + ${DELAY} )) ; then
      # This can happen when machines have date/time issues.
      log "Last success date is more than ${DELAY} seconds in the future, resetting to current date."
      /usr/bin/touch ${LASTSUCCESS}
      return 1
    else
      if (( ${now} - ${lastsuccess} > ${DELAY} )) ; then
        log "Last successful management tools run more than ${DELAY} seconds ago."
        return 0
      else
        return 1
      fi
    fi
  else
    log "${LASTSUCCESS} missing."
    return 0
  fi
}


function run_planb() {
  ${PLANB}
  exit 0
}


function main() {
  parse_arguments ${@}

  # Sleeping can help if we run on wake before a network connection is up
  sleep ${SLEEP}

  if check_lastsuccess ; then
    log "Last successful run more than ${DELAY} seconds ago, running Plan B"
    run_planb
  fi
}


main ${@}
